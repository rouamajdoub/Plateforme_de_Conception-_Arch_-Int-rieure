datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  ADMIN
  ARCHITECT
  CLIENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

enum SubscriptionStatus {
  PENDING
  APPROVED
  REJECTED
}

// Project Model
model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  client      Client   @relation(fields: [clientId], references: [id])
  clientId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// User Model
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  pseudo        String
  nomDeFamille  String
  prenom        String
  email         String   @unique
  password      String
  phoneNumber   String?
  role          Role     @default(CLIENT)
  pays          String?
  region        String?
  isVerified    Boolean  @default(false)
  contentTerm   Boolean  @default(false)
  cgvAndCguTerm Boolean  @default(false)
  infoTerm      Boolean  @default(false)
  majorTerm     Boolean  @default(false)
  exterieurParticipantTerm Boolean  @default(false)
  authTokens    AuthToken[]
  resetPasswordToken  String?
  resetPasswordExpires DateTime?

  client        Client?
  architect     Architect?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Authentication Tokens Model
model AuthToken {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  token  String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

// Client Model
model Client {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique @db.ObjectId
  country   String
  region    String
  city      String?
  projects  Project[]
  reviews   Review[]
  isActive  Boolean @default(true)
}

// Architect Model
model Architect {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  user               User    @relation(fields: [userId], references: [id])
  userId             String  @unique @db.ObjectId
  companyName        String?
  experienceYears    Int?
  specialization     String[]
  portfolioURL       String?
  certifications     String[]
  patenteNumber      String
  cin               String
  paymentStatus      PaymentStatus @default(PENDING)

  educationDegree    String?
  educationInstitution String?
  graduationYear     Int?

  softwareProficiency SoftwareProficiency[]
  location           Location?
  website           String?
  linkedin         String?
  instagram        String?
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId    String? @unique @db.ObjectId

  ratingAverage     Float @default(0)
  ratingCount       Int   @default(0)

  reviews          Review[]
  termsAccepted   TermsAccepted? @relation(fields: [termsAcceptedId], references: [id])
  termsAcceptedId String?        @unique @db.ObjectId
  emailVerified   Boolean @default(false)
  status          SubscriptionStatus @default(PENDING)
  documents       String[]
  isActive        Boolean @default(true)
}

// Location Model
model Location {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  country     String
  region      String
  city        String?
  coordinates Coordinates?
  architect   Architect? @relation(fields: [architectId], references: [id])
  architectId String?    @unique @db.ObjectId
}

// Coordinates Model
model Coordinates {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  latitude   Float
  longitude  Float
  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?   @unique @db.ObjectId
}

// Software Proficiency Model
model SoftwareProficiency {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  level      String
  architect  Architect?  @relation(fields: [architectId], references: [id])
  architectId String?    @db.ObjectId
}

// Subscription Model
model Subscription {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  status    SubscriptionStatus @default(PENDING)
  architect Architect?
}

// Review Model
model Review {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  client    Client  @relation(fields: [clientId], references: [id])
  clientId  String @db.ObjectId
  architect Architect @relation(fields: [architectId], references: [id])
  architectId String @db.ObjectId
  comment   String?
  rating    Int
  date      DateTime @default(now())
}

// Terms Accepted Model
model TermsAccepted {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  content      Boolean    @default(false)
  cgvCgu       Boolean    @default(false)
  privacy      Boolean    @default(false)
  architect    Architect?
  architectId  String?    @db.ObjectId
}
